TRUE ~ FALSE)
)
word_ratings %>%
filter(title == rownames(word_matrix))
title
word_ratings %>% glimpse()
word_ratings %>%
filter(title == word_matrix %>% select(title))
word_ratings %>%
filter(title %in% rownames(word_matrix))
word_ratings %>%
filter(title %in% rownames(word_matrix)) %>%
select(mature)
word_ratings$mature[match(x = rownames(word_matrix), word_ratings$title)]
y <- word_ratings$mature[match(rownames(word_matrix), word_ratings$title)]
y <- word_ratings$mature[match(rownames(word_matrix), word_ratings$title)]
p <- word_ratings %>%
filter(title %in% rownames(word_matrix)) %>%
select(mature)
identical(y, p)
mean(p)
p <- word_ratings %>%
filter(title %in% rownames(word_matrix)) %>%
pull(mature)
mean(p)
mean(y)
dim(p)
str(p)
str(y)
word_ratings %>% glimpse()
word_matrix %>% glimpse()
word_matrix %>% as_tibble()
word_matrix %>% rownames()
word_matrix %>% rownames() %>% class()
word_ratings %>%
filter(title %in% rownames(word_matrix))
word_ratings %>% glimpse()
p <- word_ratings %>%
# filter(title %in% rownames(word_matrix)) %>%
pull(mature)
str(p)
str(y)
mean(p)
mean(y)
p <- word_ratings %>%
filter(title %in% c(rownames(word_matrix))) %>%
pull(mature)
str(p)
str(y)
mean(p)
mean(y)
identical(y, p)
rownames(word_matrix)
rownames(word_matrix)
p <- word_ratings %>%
filter(title %in% rownames(word_matrix) %>% distinct()) %>%
pull(mature)
p <- word_ratings %>%
filter(title %in% distinct(rownames(word_matrix))) %>%
pull(mature)
distinct(rownames(word_matrix))
word_matrix %>% rownames() %>% as_tibble()
as_tibble(rownames(word_matrix))
as_tibble(rownames(word_matrix)) %>% distinct()
p <- word_ratings %>%
filter(title %in% as_tibble(rownames(word_matrix))) %>%
pull(mature)
str(p)
str(y)
mean(p)
mean(y)
as_tibble(rownames(word_matrix))
as.vector(rownames(word_matrix))
p <- word_ratings %>%
filter(title %in% as.vector(rownames(word_matrix))) %>%
pull(mature)
str(p)
word_ratings %>% select(title)
word_ratings %>%
distinct(title)
as_tibble(rownames(word_matrix))
as_tibble(rownames(word_matrix))
word_ratings %>% glimpse()
as_tibble(rownames(word_matrix)) %>%
left_join(word_ratings,by = c("value" = "title"))
as_tibble(rownames(word_matrix)) %>%
inner_join(word_ratings,by = c("value" = "title"))
as_tibble(rownames(word_matrix)) %>%
right_join(word_ratings,by = c("value" = "title"))
as_tibble(rownames(word_matrix)) %>%
inner_join(word_ratings, by = c("value" = "title"), keep = TRUE)
word_matrix <- word_ratings %>%
cast_sparse(title, word, n)
y <- word_ratings$mature[match(rownames(word_matrix), word_ratings$title)]
word_ratings$mature[match(x = rownames(word_matrix), word_ratings$title)]
mean(y)
word_ratings %>%
filter(mature == TRUE)
p <- word_ratings %>%
filter(mature == TRUE) %>%
filter(title %in% as.vector(rownames(word_matrix))) %>%
pull(mature)
str(p)
str(y)
mean(p)
mean(y)
p <- word_ratings %>%
filter(title %in% as.vector(rownames(word_matrix))) %>%
pull(mature)
str(p)
str(y)
mean(p)
mean(y)
word_ratings %>% glimpse()
?cast_sparse
mod <- cv.glmnet(word_matrix, y, family = "binomial")
plot(mod)
library(broom)
mod
mod$glmnet.fit %>%
tidy()
mod$glmnet.fit %>%
tidy() %>%
filter(lambda == mod$lambda.1se)
# Which terms are most strongly predictive?
mod$glmnet.fit %>%
tidy() %>%
filter(lambda == mod$lambda.1se) %>%
top_n(20, abs(estimate)) %>%
mutate(term = fct_reorder(term, estimate)) %>%
ggplot(aes(estimate, term)) +
geom_col()
netflix_titles <- tt$netflix_titles %>%
separate(col = duration, into = c("duration", "duration_units"), sep = " ", convert = TRUE) %>%
mutate(date_added = mdy(date_added),
year_added = year(date_added),
mature = rating %in% c("TV-MA", "R", "NC-17")) %>%
filter(!is.na(year_added)) %>%
filter(!is.na(rating))
netflix_titles%>% glimpse()
words_unnested <- netflix_titles %>%
unnest_tokens(word, description) %>%
anti_join(stop_words, by = "word")
words_unnested %>%
count(type, word, sort = TRUE) %>%
mutate(type = to_snake_case(type)) %>%
# spread(type, n, fill = 0) %>%
pivot_wider(names_from = type, values_from = n, values_fill = 0) %>%
mutate(total = movie + tv_show) %>%
arrange(desc(total)) %>%
head(50) %>%
ggplot(aes(movie, tv_show)) +
geom_point() +
geom_text(aes(label = word), vjust = 1, hjust = 1) +
scale_x_log10() +
scale_y_log10()
word_ratings <-  words_unnested %>%
count(type, title, rating, word) %>%
filter(!is.na(rating)) %>%
# mutate(mature = rating %in% c("TV-MA", "R", "NC-17")) %>%  # moved up to data processing
add_count(word, name = "word_total") %>%
filter(word_total >= 30)
word_matrix <- word_ratings %>%
cast_sparse(title, word, n)
y <- netflix_titles$mature[match(rownames(word_matrix), netflix_titles$title)]
mean(y)
mod <- cv.glmnet(word_matrix, y, family = "binomial")
plot(mod)
mod
# Which terms are most strongly predictive of mature movie?
mod$glmnet.fit %>%
tidy() %>%
filter(lambda == mod$lambda.1se) %>%
top_n(20, abs(estimate)) %>%
mutate(term = fct_reorder(term, estimate)) %>%
ggplot(aes(estimate, term)) +
geom_col()
netflix_titles %>%
select(title, director, cost, listed_in)
netflix_titles %>%
select(title, director, cast, listed_in)
netflix_titles %>%
select(title, director, cast, genre = listed_in) %>%
pivot_longer(feature_type, feature, director, cast, genre)
netflix_titles %>%
select(title, director, cast, genre = listed_in) %>%
pivot_longer(names_to = feature_type, feature, director, cast, genre)
netflix_titles %>%
select(title, director, cast, genre = listed_in) %>%
pivot_longer(names_to = feature_type, values_to = feature, director, cast, genre)
netflix_titles %>%
select(title, director, cast, genre = listed_in)
netflix_titles %>%
select(title, director, cast, genre = listed_in) %>%
pivot_longer(names_to = "feature_type", values_to = "feature",
cols = c("director", "cast", "genre"))
netflix_titles %>%
select(title, director, cast, genre = listed_in) %>%
pivot_longer(names_to = "feature_type",
values_to = "feature",
cols = c("director", "cast", "genre")) %>%
filter(!is.na(feature))
netflix_titles %>%
select(title, director, cast, genre = listed_in) %>%
pivot_longer(names_to = "feature_type",
values_to = "feature",
cols = c("director", "cast", "genre")) %>%
filter(!is.na(feature)) %>%
separate_rows(feature, sep = ", ")
netflix_titles %>%
select(title, director, cast, genre = listed_in) %>%
pivot_longer(names_to = "feature_type",
values_to = "feature",
cols = c("director", "cast", "genre")) %>%
filter(!is.na(feature)) %>%
separate_rows(feature, sep = ", ") %>%
unite(feature, feature_type, sep = ": ")
netflix_titles %>%
select(title, director, cast, genre = listed_in) %>%
pivot_longer(names_to = "feature_type",
values_to = "feature",
cols = c("director", "cast", "genre")) %>%
filter(!is.na(feature)) %>%
separate_rows(feature, sep = ", ") %>%
unite(feature, feature_type, feature, sep = ": ")
netflix_titles %>%
select(title, director, cast, genre = listed_in) %>%
pivot_longer(names_to = "feature_type",
values_to = "feature",
cols = c("director", "cast", "genre")) %>%
filter(!is.na(feature)) %>%
separate_rows(feature, sep = ", ") %>%
mutate(feature_type = str_to_title(feature_type)) %>%
unite(feature, feature_type, feature, sep = ": ")
# Tokenise the cast and actors
other_features <- netflix_titles %>%
select(title, director, cast, genre = listed_in) %>%
pivot_longer(names_to = "feature_type",
values_to = "feature",
cols = c("director", "cast", "genre")) %>%
filter(!is.na(feature)) %>%
separate_rows(feature, sep = ", ") %>%
mutate(feature_type = str_to_title(feature_type)) %>%
unite(feature, feature_type, feature, sep = ": ")
# Tokenise the cast and actors
other_features <- netflix_titles %>%
select(title, director, cast, genre = listed_in) %>%
pivot_longer(names_to = "feature_type",
values_to = "feature",
cols = c("director", "cast", "genre")) %>%
filter(!is.na(feature)) %>%
separate_rows(feature, sep = ", ") %>%
mutate(feature_type = str_to_title(feature_type)) %>%
unite(feature, feature_type, feature, sep = ": ") %>%
add_count(feature, name = "feature_count") %>%
filter(feature_count >= 10)
other_features
# Tokenise the cast and actors
other_features <- netflix_titles %>%
select(title, director, cast, genre = listed_in) %>%
pivot_longer(names_to = "feature_type",
values_to = "feature",
cols = c("director", "cast", "genre")) %>%
filter(!is.na(feature)) %>%
separate_rows(feature, sep = ", ") %>%
mutate(feature_type = str_to_title(feature_type)) %>%
unite(col = feature, feature_type, feature, sep = ": ") %>%
add_count(feature, name = "feature_count") %>%
filter(feature_count >= 10)
other_features
# Sparse
word_matrix <- word_ratings %>%
mutate(feature = paste("Description:", word)) %>%
bind_rows(other_features)
word_matrix
# Sparse
word_matrix <- word_ratings %>%
mutate(feature = paste("Description:", word)) %>%
bind_rows(other_features)
dim(word_matrix)
# Sparse
word_matrix <- word_ratings %>%
mutate(feature = paste("Description:", word)) %>%
bind_rows(other_features) %>%
cast_sparse(title, feature, n)
dim(word_matrix)
# Tokenise the cast and actors
other_features <- netflix_titles %>%
select(title, director, cast, genre = listed_in) %>%
pivot_longer(names_to = "feature_type",
values_to = "feature",
cols = c("director", "cast", "genre")) %>%
filter(!is.na(feature)) %>%
separate_rows(feature, sep = ", ") %>%
mutate(feature_type = str_to_title(feature_type)) %>%
unite(col = feature, feature_type, feature, sep = ": ") %>%
add_count(feature, name = "feature_count") %>%
filter(feature_count >= 10)
other_features
# Sparse
word_matrix <- word_ratings %>%
mutate(feature = paste("Description:", word)) %>%
bind_rows(other_features) %>%
cast_sparse(title, feature, n)
dim(word_matrix)
netflix_titles %>%
select(title, director, cast, genre = listed_in) %>%
pivot_longer(names_to = "feature_type",
values_to = "feature",
cols = c("director", "cast", "genre")) %>%
filter(!is.na(feature)) %>%
separate_rows(feature, sep = ", ") %>%
mutate(feature_type = str_to_title(feature_type)) %>%
unite(col = feature, feature_type, feature, sep = ": ") %>%
add_count(feature, name = "feature_count") %>%
filter(feature_count >= 10)
other_features
# Tokenise the cast and actors
other_features <- netflix_titles %>%
select(title, director, cast, genre = listed_in) %>%
pivot_longer(names_to = "feature_type",
values_to = "feature",
cols = c("director", "cast", "genre")) %>%
filter(!is.na(feature)) %>%
separate_rows(feature, sep = ", ") %>%
mutate(feature_type = str_to_title(feature_type)) %>%
unite(col = feature, feature_type, feature, sep = ": ") %>%
add_count(feature, name = "feature_count") %>%
filter(feature_count >= 10)
word_ratings <-  words_unnested %>%
count(type, title, rating, word) %>%
filter(!is.na(rating)) %>%
# mutate(mature = rating %in% c("TV-MA", "R", "NC-17")) %>%  # moved up to data processing
add_count(word, name = "word_total") %>%
filter(word_total >= 30)
# Tokenise the cast and actors
other_features <- netflix_titles %>%
select(title, director, cast, genre = listed_in) %>%
pivot_longer(names_to = "feature_type",
values_to = "feature",
cols = c("director", "cast", "genre")) %>%
filter(!is.na(feature)) %>%
separate_rows(feature, sep = ", ") %>%
mutate(feature_type = str_to_title(feature_type)) %>%
unite(col = feature, feature_type, feature, sep = ": ") %>%
add_count(feature, name = "feature_count") %>%
filter(feature_count >= 10)
other_features
# Sparse
word_matrix <- word_ratings %>%
mutate(feature = paste("Description:", word)) %>%
bind_rows(other_features) %>%
cast_sparse(title, feature, n)
dim(word_matrix)
# Sparse
word_matrix <- word_ratings %>%
mutate(feature = paste("Description:", word)) %>%
bind_rows(other_features) %>%
cast_sparse(title, feature, n)
dim(word_matrix)
# Sparse
feature_matrix <- word_ratings %>%
mutate(feature = paste("Description:", word)) %>%
bind_rows(other_features) %>%
cast_sparse(title, feature, n)
dim(feature_matrix)
y <- netflix_titles$mature[match(rownames(feature_matrix), netflix_titles$title)]
mean(y)
word_ratings %>% glimpse()
mod <- cv.glmnet(feature_matrix, y, family = "binomial")
# Sparse
feature_matrix <- word_ratings %>%
mutate(feature = paste("Description:", word)) %>%
bind_rows(other_features) %>%
cast_sparse(title, feature, n)
mod <- cv.glmnet(feature_matrix, y, family = "binomial")
# Sparse
feature_matrix <- word_ratings %>%
mutate(feature = paste("Description:", word)) %>%
bind_rows(other_features) %>%
cast_sparse(title, feature)
dim(feature_matrix)
y <- netflix_titles$mature[match(rownames(feature_matrix), netflix_titles$title)]
mean(y)
mod <- cv.glmnet(feature_matrix, y, family = "binomial")
plot(mod)
mod
# Which terms are most strongly predictive of mature movie?
mod$glmnet.fit %>%
tidy() %>%
filter(lambda == mod$lambda.1se) %>%
top_n(20, abs(estimate)) %>%
mutate(term = fct_reorder(term, estimate)) %>%
ggplot(aes(estimate, term)) +
geom_col()
# Which terms are most strongly predictive of mature movie?
mod$glmnet.fit %>%
tidy() %>%
filter(lambda == mod$lambda.1se) %>%
top_n(40, abs(estimate)) %>%
mutate(term = fct_reorder(term, estimate)) %>%
ggplot(aes(estimate, term)) +
geom_col()
mod$glmnet.fit %>%
tidy()
# Which terms are most strongly predictive of mature movie?
mod$glmnet.fit %>%
tidy() %>%
separate(term, c("feature_type", "feature"), sep = ": ")
# Which terms are most strongly predictive of mature movie?
mod$glmnet.fit %>%
tidy() %>%
separate(term, c("feature_type", "feature"), sep = ": ") %>%
filter(lambda == mod$lambda.1se) %>%
top_n(40, abs(estimate)) %>%
mutate(term = fct_reorder(feature, estimate)) %>%
ggplot(aes(estimate, feature, color = feature_type)) +
geom_col()
# Which terms are most strongly predictive of mature movie?
mod$glmnet.fit %>%
tidy() %>%
separate(term, c("feature_type", "feature"), sep = ": ") %>%
filter(lambda == mod$lambda.1se) %>%
top_n(40, abs(estimate)) %>%
mutate(term = fct_reorder(feature, estimate)) %>%
ggplot(aes(estimate, feature, color = feature_type)) +
geom_col(fill = feature_type)
# Which terms are most strongly predictive of mature movie?
mod$glmnet.fit %>%
tidy() %>%
separate(term, c("feature_type", "feature"), sep = ": ") %>%
filter(lambda == mod$lambda.1se) %>%
top_n(40, abs(estimate)) %>%
mutate(term = fct_reorder(feature, estimate)) %>%
ggplot(aes(estimate, feature, fill = feature_type)) +
geom_col()
mod$glmnet.fit %>%
tidy() %>%
separate(term, c("feature_type", "feature"), sep = ": ")
# Which terms are most strongly predictive of mature movie?
mod$glmnet.fit %>%
tidy() %>%
separate(term, c("feature_type", "feature"), sep = ": ") %>%
filter(lambda == mod$lambda.1se) %>%
top_n(40, abs(estimate)) %>%
mutate(feature = fct_reorder(feature, estimate)) %>%
ggplot(aes(estimate, feature, fill = feature_type)) +
geom_col()
# Tokenise the cast and actors
other_features <- netflix_titles %>%
select(title, director, cast, genre = listed_in, country) %>%
pivot_longer(names_to = "feature_type",
values_to = "feature",
cols = c("director", "cast", "genre", "country")) %>%
filter(!is.na(feature)) %>%
separate_rows(feature, sep = ", ") %>%
mutate(feature_type = str_to_title(feature_type)) %>%
unite(col = feature, feature_type, feature, sep = ": ") %>%
add_count(feature, name = "feature_count") %>%
filter(feature_count >= 10)
other_features
# Sparse
feature_matrix <- word_ratings %>%
mutate(feature = paste("Description:", word)) %>%
bind_rows(other_features) %>%
cast_sparse(title, feature)
dim(feature_matrix)
y <- netflix_titles$mature[match(rownames(feature_matrix), netflix_titles$title)]
mean(y)
word_ratings %>% glimpse()
mod <- cv.glmnet(feature_matrix, y, family = "binomial")
plot(mod)
mod
# Which terms are most strongly predictive of mature movie?
mod$glmnet.fit %>%
tidy() %>%
separate(term, c("feature_type", "feature"), sep = ": ") %>%
filter(lambda == mod$lambda.1se) %>%
top_n(40, abs(estimate)) %>%
mutate(feature = fct_reorder(feature, estimate)) %>%
ggplot(aes(estimate, feature, fill = feature_type)) +
geom_col()
# Which terms are most strongly predictive of mature movie?
mod$glmnet.fit %>%
tidy() %>%
separate(term, c("feature_type", "feature"), sep = ": ") %>%
filter(lambda == mod$lambda.1se) %>%
top_n(40, abs(estimate)) %>%
mutate(feature = fct_reorder(feature, estimate)) %>%
ggplot(aes(estimate, feature, fill = feature_type)) +
geom_col() +
labs(x = "Coefficient: Does this make the title more likely to be TV-MA/R?",
y = "",
fill = "Feature Type")
# What is we look at rating and country?
# I wonder if did both type and country
# Jefferies Confidence Interval - qbeta is a quantile of the beta distn.  proc.test
netflix_titles %>%
filter(!is.na(rating), !is.na(country)) %>%
group_by(type, country = fct_lump(country, 9)) %>%
summarise(n_mature = sum(rating %in% c("R", "TV-MA", "NC-17")),
n = n(),
.groups = "drop") %>%
mutate(pct_mature = n_mature / n,
conf_low = qbeta(0.025, n_mature + .5, n - n_mature + .5),
conf_high = qbeta(0.975, n_mature + .5, n - n_mature + .5)) %>%
ggplot(aes(pct_mature, country, color = type)) +
geom_point(aes(size = n)) +
geom_errorbar(aes(xmin = conf_low, xmax = conf_high), width = .1) +
scale_x_continuous(labels = percent) +
expand_limits(x = 0) +
labs(x = "% of titles that are R/TV-MA")
