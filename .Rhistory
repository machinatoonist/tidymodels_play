attrition_results %>%
spec(truth = Attrition, estimate = .pred_class)
# Custom metrics
custom_metrics <- metric_set(accuracy, sens, spec)
?metric_set
attrition_results %>%
custom_metrics(truth = Attrition, estimate = .pred_class)
# pos 30  20
# neg 10  40
#
# accuracy <-  (30 + 40)/(100)
# sensitivity <- 30/40
# specificity <- 40/60
# Calculate the accuracy
#
#Receiver Operator Curve
#ROC
attrition_results %>%
roc_curve(truth = Attrition, .pred_No) %>%
autoplot()
# The initial model performs poorly
attrition_results %>%
roc_auc(truth = Attrition, .pred_No)
attrition_results %>%
conf_mat(truth = Attrition, estimate = .pred_class) %>%
autoplot("mosaic")
# Train linear_model with last_fit()
# Add all parameters into the model
logistic_last_fit <- logistic_model %>%
last_fit(Attrition ~ ., split = employee_split)
# Collect predictions and view results
predictions_df <- logistic_last_fit %>% collect_predictions()
predictions_df %>% glimpse()
predictions_df %>%
roc_curve(truth = Attrition, .pred_No) %>%
autoplot()
predictions_df %>%
roc_auc(truth = Attrition, .pred_No)
# View test set metrics
logistic_last_fit %>%
collect_metrics()
# Custom metrics function
last_fit_metrics <- metric_set(accuracy,sens, spec, roc_auc)
# Calculate metrics
last_fit_metrics(predictions_df,
truth = Attrition,
estimate = .pred_class,
.pred_yes)
# Calculate metrics
last_fit_metrics(predictions_df,
truth = Attrition,
estimate = .pred_class,
.pred_no)
# Calculate metrics
last_fit_metrics(predictions_df,
truth = Attrition,
estimate = .pred_class,
.pred_No)
attrition %>%
glimpse()
employee_log_rec <- recipe(Attrition ~ .,
data = employee) %>%
# Add log transformation step
step_log(MonthlyRate, base = 10)
employee_log_rec <- recipe(Attrition ~ .,
data = employee_training) %>%
# Add log transformation step
step_log(MonthlyRate, base = 10)
# View variable roles and data types
employee_log_rec %>%
summary()
# View variable roles and data types
employee_log_rec %>%
summary() %>% glimpse()
# View variable roles and data types
employee_log_rec %>%
summary() %>% View()
# Train the telecom_log_rec object
employee_log_rec_prep <- employee_log_rec %>%
prep(training = employee_training)
employee_log_rec_prep
# Apply to training data
employee_log_rec_prep %>%
bake(new_data = NULL)
employee_prep_tbl <- recipe(Attrition ~ .,
data = employee_training) %>%
# Add log transformation step
step_log(MonthlyRate, base = 10) %>%
prep() %>% bake()
employee_prep_tbl <- recipe(Attrition ~ .,
data = employee_training) %>%
# Add log transformation step
step_log(MonthlyRate, base = 10) %>%
prep() %>% bake(new_data = employee_training)
employee_prep_tbl
# Test for multicollinearity
employee_training %>%
select_if(is.numeric) %>%
corr()
# Test for multicollinearity
employee_training %>%
select_if(is.numeric) %>%
cor()
# Test for multicollinearity
employee_training %>%
select_if(is.numeric) %>%
cor() %>% View()
recipe(Attrition ~ .,
data = employee_training) %>%
# Remove collinear predictors (omit outcomes with -all_outcomes() if numeric)
step_corr(all_numeric(), threshold = 0.9)
# Add log transformation step
step_log(MonthlyRate, base = 10) %>%
prep()
recipe(Attrition ~ .,
data = employee_training) %>%
# Remove collinear predictors (omit outcomes with -all_outcomes() if numeric)
step_corr(all_numeric(), threshold = 0.9)
recipe(Attrition ~ .,
data = employee_training) %>%
# Remove collinear predictors (omit outcomes with -all_outcomes() if numeric)
step_corr(all_numeric(), threshold = 0.9)
# Add log transformation step
step_log(MonthlyRate, base = 10)
recipe(Attrition ~ .,
data = employee_training) %>%
# Remove collinear predictors (omit outcomes with -all_outcomes() if numeric)
step_corr(all_numeric(), threshold = 0.9) %>%
# Add log transformation step
step_log(MonthlyRate, base = 10)
recipe(Attrition ~ .,
data = employee_training) %>%
# Remove collinear predictors (omit outcomes with -all_outcomes() if numeric)
step_corr(all_numeric(), threshold = 0.9) %>%
# Add log transformation step
step_log(MonthlyRate, base = 10) %>%
prep()
recipe(Attrition ~ .,
data = employee_training) %>%
# Remove collinear predictors (omit outcomes with -all_outcomes() if numeric)
step_corr(all_numeric(), threshold = 0.9) %>%
# Normalise
step_normalize(all_numeric())
recipe(Attrition ~ .,
data = employee_training) %>%
# Remove collinear predictors (omit outcomes with -all_outcomes() if numeric)
step_corr(all_numeric(), threshold = 0.9) %>%
# Normalise
step_normalize(all_numeric()) %>%
# Add log transformation step for variable that are asymmetric
# step_log(MonthlyRate, base = 10) %>%
prep()
recipe(Attrition ~ .,
data = employee_training) %>%
# Remove collinear predictors (omit outcomes with -all_outcomes() if numeric)
step_corr(all_numeric(), threshold = 0.9) %>%
# Normalise
step_center(all_numeric())
recipe(Attrition ~ .,
data = employee_training) %>%
# Remove collinear predictors (omit outcomes with -all_outcomes() if numeric)
step_corr(all_numeric(), threshold = 0.9) %>%
# Normalise
step_center(all_numeric()) %>%
step_scale(all_numeric())
recipe(Attrition ~ .,
data = employee_training) %>%
# Remove collinear predictors (omit outcomes with -all_outcomes() if numeric)
step_corr(all_numeric(), threshold = 0.9) %>%
# Normalise - also try step_normalize()
step_center(all_numeric()) %>%
step_scale(all_numeric()) %>%
# Add log transformation step for variable that are asymmetric
# step_log(MonthlyRate, base = 10) %>%
prep()
prep_training_tbl <- recipe(Attrition ~ .,
data = employee_training) %>%
# Remove collinear predictors (omit outcomes with -all_outcomes() if numeric)
step_corr(all_numeric(), threshold = 0.9) %>%
# Normalise - also try step_normalize()
step_center(all_numeric()) %>%
step_scale(all_numeric()) %>%
# Add log transformation step for variable that are asymmetric
# step_log(MonthlyRate, base = 10) %>%
prep() %>% bake(new_data = employee_training)
# * Final recipe ----
prep_training_tbl <- recipe(Attrition ~ .,
data = attrition) %>%
# Remove collinear predictors (omit outcomes with -all_outcomes() if numeric)
step_corr(all_numeric(), threshold = 0.9) %>%
# Normalise - also try step_normalize()
step_center(all_numeric()) %>%
step_scale(all_numeric()) %>%
# Add log transformation step for variable that are asymmetric
# step_log(MonthlyRate, base = 10) %>%
prep() %>% bake(new_data = employee_training)
# * Final recipe ----
prep_training_tbl <- recipe(Attrition ~ .,
data = attrition) %>%
# Remove collinear predictors (omit outcomes with -all_outcomes() if numeric)
step_corr(all_numeric(), threshold = 0.9) %>%
# Normalise - also try step_normalize()
step_center(all_numeric()) %>%
step_scale(all_numeric()) %>%
# Add log transformation step for variable that are asymmetric
# step_log(MonthlyRate, base = 10) %>%
prep() %>% bake(new_data = attrition)
prep_training_tbl_split <- initial_split(prep_training_tbl,
prop = 0.75,
strata = Attrition)
prep_logistic_fit <- logistic_model %>%
last_fit(Attrition ~ ., split = prep_training_tbl_split)
# Collect predictions and view results
prep_predictions_df <- prep_logistic_fit %>%
collect_predictions()
prep_predictions_df %>%
roc_curve(truth = Attrition, .pred_No) %>%
autoplot()
# Calculate metrics
last_fit_metrics(prep_predictions_df,
truth = Attrition,
estimate = .pred_class,
.pred_No)
# Calculate metrics
last_fit_metrics(predictions_df,
truth = Attrition,
estimate = .pred_class,
.pred_No)
# * Final recipe ----
prep_training_tbl <- recipe(Attrition ~ .,
data = attrition) %>%
# Remove collinear predictors (omit outcomes with -all_outcomes() if numeric)
step_corr(all_numeric(), threshold = 0.9) %>%
# Normalise - also try step_normalize()
# step_center(all_numeric()) %>%
# step_scale(all_numeric()) %>%
# Add log transformation step for variable that are asymmetric
# step_log(MonthlyRate, base = 10) %>%
prep() %>% bake(new_data = attrition)
prep_training_tbl_split <- initial_split(prep_training_tbl,
prop = 0.75,
strata = Attrition)
prep_logistic_fit <- logistic_model %>%
last_fit(Attrition ~ ., split = prep_training_tbl_split)
prep_predictions_df %>%
roc_curve(truth = Attrition, .pred_No) %>%
autoplot()
# Collect predictions and view results
prep_predictions_df <- prep_logistic_fit %>%
collect_predictions()
# Calculate metrics
last_fit_metrics(prep_predictions_df,
truth = Attrition,
estimate = .pred_class,
.pred_No)
# * Final recipe ----
prep_training_tbl <- recipe(Attrition ~ .,
data = attrition) %>%
# Remove collinear predictors (omit outcomes with -all_outcomes() if numeric)
# step_corr(all_numeric(), threshold = 0.9) %>%
# Normalise - also try step_normalize()
# step_center(all_numeric()) %>%
# step_scale(all_numeric()) %>%
# Add log transformation step for variable that are asymmetric
# step_log(MonthlyRate, base = 10) %>%
prep() %>% bake(new_data = attrition)
prep_training_tbl_split <- initial_split(prep_training_tbl,
prop = 0.75,
strata = Attrition)
prep_logistic_fit <- logistic_model %>%
last_fit(Attrition ~ ., split = prep_training_tbl_split)
# Collect predictions and view results
prep_predictions_df <- prep_logistic_fit %>%
collect_predictions()
prep_predictions_df %>%
roc_curve(truth = Attrition, .pred_No) %>%
autoplot()
# Calculate metrics
last_fit_metrics(prep_predictions_df,
truth = Attrition,
estimate = .pred_class,
.pred_No)
# * Final recipe ----
prep_training_tbl <- recipe(Attrition ~ .,
data = attrition) %>%
# Remove collinear predictors (omit outcomes with -all_outcomes() if numeric)
step_corr(all_numeric(), threshold = 0.9) %>%
# Normalise - also try step_normalize()
step_normalize(all_numeric()) %>%
# step_center(all_numeric()) %>%
# step_scale(all_numeric()) %>%
# Add log transformation step for variable that are asymmetric
# step_log(MonthlyRate, base = 10) %>%
prep() %>% bake(new_data = attrition)
prep_training_tbl_split <- initial_split(prep_training_tbl,
prop = 0.75,
strata = Attrition)
prep_logistic_fit <- logistic_model %>%
last_fit(Attrition ~ ., split = prep_training_tbl_split)
# Collect predictions and view results
prep_predictions_df <- prep_logistic_fit %>%
collect_predictions()
prep_predictions_df %>%
roc_curve(truth = Attrition, .pred_No) %>%
autoplot()
# Calculate metrics
last_fit_metrics(prep_predictions_df,
truth = Attrition,
estimate = .pred_class,
.pred_No)
# Calculate metrics
last_fit_metrics(predictions_df,
truth = Attrition,
estimate = .pred_class,
.pred_No)
# * Final recipe ----
prep_tbl <- recipe(Attrition ~ .,
data = attrition) %>%
# Remove collinear predictors (omit outcomes with -all_outcomes() if numeric)
step_corr(all_numeric(), threshold = 0.9) %>%
# Normalise - also try step_normalize()
step_normalize(all_numeric()) %>%
# step_center(all_numeric()) %>%
# step_scale(all_numeric()) %>%
# Add log transformation step for variable that are asymmetric
# step_log(MonthlyRate, base = 10) %>%
prep() %>% bake(new_data = attrition)
prep_tbl_split <- initial_split(prep_training_tbl,
prop = 0.75,
strata = Attrition)
prep_logistic_fit <- logistic_model %>%
last_fit(Attrition ~ ., split = prep_tbl_split)
prep_predictions_df %>%
roc_curve(truth = Attrition, .pred_No) %>%
autoplot()
# Collect predictions and view results
prep_predictions_df <- prep_logistic_fit %>%
collect_predictions()
# Calculate metrics
last_fit_metrics(prep_predictions_df,
truth = Attrition,
estimate = .pred_class,
.pred_No)
employee_training
# 8.0 CROSS VALIDATION ----
#
# Create cross validation folds
set.seed(290)
employee_folds <- vfold_cv(employee_training, v = 5,
strata = Attrition)
employee_folds
# Create custom metrics function
employee_metrics <- metric_set(roc_auc, sens, spec)
employee_dt_wkfl <- workflow()
dt_model <- decision_tree() %>%
# Specify the engine
set_engine('rpart') %>%
# Specify the mode
set_mode('classification')
# Build feature engineering pipeline
employee_recipe <- recipe(Attrition ~ .,
data = employee_training) %>%
# Correlation filter
step_corr(all_numeric(), threshold = 0.85) %>%
# Normalize numeric predictors
step_normalize(all_numeric()) %>%
# Create dummy variables
step_dummy(all_nominal(), -all_outcomes())
# Create a workflow
employee_dt_wkfl <- workflow() %>%
# Include the model object
add_model(dt_model) %>%
# Include the recipe object
add_recipe(employee_recipe)
# 8.0 CROSS VALIDATION ----
#
# Create cross validation folds
set.seed(290)
employee_folds <- vfold_cv(employee_training, v = 5,
strata = Attrition)
# Create custom metrics function
employee_metrics <- metric_set(roc_auc, sens, spec)
dt_model <- decision_tree() %>%
# Specify the engine
set_engine('rpart') %>%
# Specify the mode
set_mode('classification')
# Build feature engineering pipeline
employee_recipe <- recipe(Attrition ~ .,
data = employee_training) %>%
# Correlation filter
step_corr(all_numeric(), threshold = 0.85) %>%
# Normalize numeric predictors
step_normalize(all_numeric()) %>%
# Create dummy variables
step_dummy(all_nominal(), -all_outcomes())
# Create a workflow
employee_dt_wkfl <- workflow() %>%
# Include the model object
add_model(dt_model) %>%
# Include the recipe object
add_recipe(employee_recipe)
# Fit resamples
employee_dt_rs <- employee_dt_wkfl %>%
fit_resamples(resamples = employee_folds,
metrics = employee_metrics)
# View performance metrics
employee_dt_rs %>%
collect_metrics()
# Calculate metrics
last_fit_metrics(prep_predictions_df,
truth = Attrition,
estimate = .pred_class,
.pred_No)
# Create custom metrics function
employee_metrics <- metric_set(accuracy, sens, spec, roc_auc)
# Calculate metrics
last_fit_metrics(predictions_df,
truth = Attrition,
estimate = .pred_class,
.pred_No)
# 8.0 CROSS VALIDATION ----
#
# Create cross validation folds
set.seed(290)
employee_folds <- vfold_cv(employee_training, v = 5,
strata = Attrition)
# Create custom metrics function
employee_metrics <- metric_set(accuracy, sens, spec, roc_auc)
dt_model <- decision_tree() %>%
# Specify the engine
set_engine('rpart') %>%
# Specify the mode
set_mode('classification')
# Build feature engineering pipeline
employee_recipe <- recipe(Attrition ~ .,
data = employee_training) %>%
# Correlation filter
step_corr(all_numeric(), threshold = 0.85) %>%
# Normalize numeric predictors
step_normalize(all_numeric()) %>%
# Create dummy variables
step_dummy(all_nominal(), -all_outcomes())
# Create a workflow
employee_dt_wkfl <- workflow() %>%
# Include the model object
add_model(dt_model) %>%
# Include the recipe object
add_recipe(employee_recipe)
# Fit resamples
employee_dt_rs <- employee_dt_wkfl %>%
fit_resamples(resamples = employee_folds,
metrics = employee_metrics)
# View performance metrics
employee_dt_rs %>%
collect_metrics()
# Calculate metrics
last_fit_metrics(prep_predictions_df,
truth = Attrition,
estimate = .pred_class,
.pred_No)
logistic_model <- logistic_reg() %>%
# Specify the engine
set_engine('glm') %>%
# Specify the mode
set_mode('classification')
# Create workflow
employee_logistic_wkfl <- workflow() %>%
# Add model
add_model(logistic_model) %>%
# Add recipe
add_recipe(employee_recipe)
# Create workflow
employee_logistic_wkfl <- workflow() %>%
# Add model
add_model(logistic_model) %>%
# Add recipe
add_recipe(employee_recipe)
# Create workflow
employee_logistic_wkfl <- workflow() %>%
# Add model
add_model(logistic_model) %>%
# Add recipe
add_recipe(employee_recipe)
# Fit resamples
employee_logistic_rs <- employee_logistic_wkfl %>%
fit_resamples(resamples = employee_folds,
metrics = employee_metrics)
# View performance metrics
employee_logistic_rs %>%
collect_metrics()
# View performance metrics
employee_dt_rs %>%
collect_metrics()
# Calculate metrics
last_fit_metrics(prep_predictions_df,
truth = Attrition,
estimate = .pred_class,
.pred_No)
?parsnip_add
?parsnip_addin
dt_model <- decision_tree() %>%
# Specify the engine
set_engine('rpart') %>%
# Specify the mode
set_mode('classification')
# * Decision Tree CV ----
#
parsnip_addin()
install.packages(c("shiny", "miniUI", "rstudioapi"))
install.packages(c("shiny", "miniUI", "rstudioapi"))
install.packages(c("shiny", "miniUI", "rstudioapi"))
